#!/usr/bin/env node

const { argv } = require('yargs')
  .usage('Usage: ./$0 <directory ID> [options]')
  .example('./$0 1ULY8ISgWSOVc0UrzejykVgXfVL_I4r75', 'Get statistics of all files contained in https://drive.google.com/drive/folders/1ULY8ISgWSOVc0UrzejykVgXfVL_I4r75')
  .example('./$0 root -s size -t html -o out.html', 'Get personal disk root directory statistics, the results are output in HTML form, arranged in reverse order according to the total size, and saved to out in this directory. html file (new if not exist, overwrite if exists)' )
  .example('./$0 root -s name -t json -o out.json', 'Get personal disk root directory statistics, the results are output in JSON format, sorted according to file extension, and saved to out in this directory. json file')
  .example('./$0 root -t all -o all.json', 'Get personal disk root directory statistics, output all file information (including folders) in JSON format, save to all.json in this directory In the file')
  .alias('u', 'update')
  .describe('u', 'Force to get information online (regardless of whether there is a local cache)')
  .alias('N', 'not_teamdrive')
  .describe('N', 'If it is not a team disk link, you can add this parameter to improve the interface query efficiency and reduce the delay. If you want to count the personal disk and the service account in the ./sa directory does not have relevant permissions, please make sure Add this parameter to query using personal auth information')
  .alias('S', 'service_account')
  .describe('S', 'Specify to use service account for statistics, provided the SA json file must be placed in the sa directory')
  .alias('s', 'sort')
  .describe('s', 'Statistic result sorting method, optional value name or size, if not filled, it will be sorted in reverse order according to the number of files by default')
  .alias('t', 'type')
  .describe('t', 'Statistics output type, optional value html/json/all, all means to output all file json data, it is best to use with -o. If not filled, the command line form is output by default')
  .alias('o', 'output')
  .describe('o', 'statistic output file, suitable for use with -t')
  .help('h')
  .alias('h', 'help')

const { count, validate_fid } = require('./src/gd')
const [fid] = argv._
if (validate_fid(fid)) {
  const { update, sort, type, output, not_teamdrive, service_account } = argv
  count({ fid, update, sort, type, output, not_teamdrive, service_account }).catch(console.error)
} else {
  console.warn('missing or malformed list ID')
}
